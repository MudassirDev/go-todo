// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package database

import (
	"context"
	"time"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
  id, user_id, task, created_at, updated_at
) VALUES (
  ?, ?, ?, ?, ?
)
RETURNING id, user_id, task, is_completed, created_at, updated_at
`

type CreateTaskParams struct {
	ID        interface{}
	UserID    interface{}
	Task      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.ID,
		arg.UserID,
		arg.Task,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Task,
		&i.IsCompleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTaskWithID = `-- name: DeleteTaskWithID :exec
DELETE FROM tasks WHERE id = ? AND user_id = ?
`

type DeleteTaskWithIDParams struct {
	ID     interface{}
	UserID interface{}
}

func (q *Queries) DeleteTaskWithID(ctx context.Context, arg DeleteTaskWithIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteTaskWithID, arg.ID, arg.UserID)
	return err
}

const getTasksWithUserID = `-- name: GetTasksWithUserID :many
SELECT id, user_id, task, is_completed, created_at, updated_at FROM tasks WHERE user_id = ?
`

func (q *Queries) GetTasksWithUserID(ctx context.Context, userID interface{}) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksWithUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Task,
			&i.IsCompleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskWithID = `-- name: UpdateTaskWithID :one
UPDATE tasks SET is_completed = ? WHERE id = ? AND user_id = ? RETURNING id, user_id, task, is_completed, created_at, updated_at
`

type UpdateTaskWithIDParams struct {
	IsCompleted bool
	ID          interface{}
	UserID      interface{}
}

func (q *Queries) UpdateTaskWithID(ctx context.Context, arg UpdateTaskWithIDParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTaskWithID, arg.IsCompleted, arg.ID, arg.UserID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Task,
		&i.IsCompleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
